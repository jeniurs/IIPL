# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aZ3sifEjmISOXhZ50mhxdtFmGRiXusag
"""

import numpy as np
import pandas as pd
import torch
import math
from torch.utils.data import Dataset
from torch.utils.data import DataLoader
from torch.utils.data import random_split
import nltk
nltk.download('punkt')
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.corpus import stopwords
from nltk.stem.wordnet import WordNetLemmatizer
nltk.download('stopwords')
nltk.download('wordnet')
stopwords = set(stopwords.words('english'))
import os
from tqdm import tqdm
tqdm.pandas()
from collections import Counter
from torch.utils.data import TensorDataset

device = torch.device('cpu')

#custom dataset
class CustomDataset(torch.utils.data.Dataset):
  def __init__(self):
    data = pd.read_csv("/content/IMDB Dataset.csv")

    #positive=1, negative=0
    def transform_label(label):
     return 1 if label == 'positive' else 0

    data['label'] = data['sentiment'].progress_apply(transform_label)
    data['token_length'] = data.review.progress_apply(lambda x: len(x.split()))

    #레이블1인, positive data만 골라서 보기
    data_pos = data[data['label'] == 1]
    data_pos.head()

    #레이블0인, negative data만 골라서 보기
    data_neg = data[data['label'] == 0]
    data_neg.head()

    def tokenize(text):
      return word_tokenize(text)

    #불용어 추출
    def rm_stopwords(text):
      return [i for i in text if i not in stopwords]

    #표제어 추출
    def lemmatize(text):
      lemmatizer = WordNetLemmatizer()
      lemmas = [lemmatizer.lemmatize(t) for t in text]
    # make sure lemmas does not contains sotpwords
      return rm_stopwords(lemmas)

    #전처리 파이프라인
    def preprocess_pipeline(text):
      tokens = tokenize(text)
      no_stopwords = rm_stopwords(tokens)
      lemmas = lemmatize(no_stopwords)
      return ' '.join(lemmas)

    data['processed'] = data['review'].progress_apply(preprocess_pipeline)
    data[['processed', 'label']].to_csv('./imdb_processed.csv', index=False, header=True)


    data = pd.read_csv('./imdb_processed.csv')

    data.head()


    reviews = data.processed.values
    #print(reviews)
    words = ' '.join(reviews)
    #list로 변
    words = words.split()

    #몇번 반복되는지 확인해주는 counter
    counter = Counter(words)
    #오름차순으로 정렬
    vocab = sorted(counter, key=counter.get, reverse=True)
    #1위부터 매핑
    int2word = dict(enumerate(vocab, 1))
    #순서반대
    int2word[0] = '<PAD>'
    self.word2int = {word: id for id, word in int2word.items()}
    #인코딩
    reviews_enc = [[self.word2int[word] for word in review.split()] for review in tqdm(reviews)]
    #for i in range(10):
     #print(reviews_enc[i][:10])
    #padding
    def pad_features(reviews, pad_id, seq_length=128):
        features = np.full((len(reviews), seq_length), pad_id, dtype=int)

        for i, row in enumerate(reviews):
          # if seq_length < len(row) then review will be trimmed
          #print(i,len(row))
          features[i, :len(row)] = np.array(row)[:seq_length]


          #print(features.shape)
        return features


    seq_length = 256

    #<pad>으로 채워주자
    features = pad_features(reviews_enc, pad_id=self.word2int['<PAD>'], seq_length=seq_length)

    assert len(features) == len(reviews_enc)
    assert len(features[0]) == seq_length
    print(features[:10, :10])

    labels = data.label.to_numpy()

    train_size = .7     # we will use 70% of whole data as train set
    val_size = .5       # and we will use 50% of test set as validation set

    # make train set
    split_id = int(len(features) * train_size)

    self.train_x, self.remain_x = features[:split_id], features[split_id:]
    self.train_y, self.remain_y = labels[:split_id], labels[split_id:]

    # make val and test set
    split_val_id = int(len(self.remain_x) * val_size)
    self.val_x, self.test_x = self.remain_x[:split_val_id], self.remain_x[split_val_id:]
    self.val_y, self.test_y = self.remain_y[:split_val_id], self.remain_y[split_val_id:]

    # define batch size
    batch_size = 128



  def __len__(self):
     return len(self.train_x)


  def __getitem__(self, idx):
    x = torch.FloatTensor(self.train_x[idx])
    y = torch.FloatTensor(self.train_y[idx])
    x.size()
    return x,y

dataset = CustomDataset()

#def my_collate(samples):
    #new_=list(samples)
    #inputs = [new['input'] for new in new_]
    #labels = [new['label'] for new in new_]
    #pad_inputs = torch.nn.utils.rnn.pad_sequence(inputs, batch_first=True)
    #pad_labels = torch.nn.utils.rnn.pad_sequence(labels, batch_first=True, padding_value=-1)
    #return pad_inputs, pad_labels


dataset_size = len(dataset)
#print(len(dataset[34999][0]))
trainset=TensorDataset(torch.from_numpy(dataset.train_x), torch.from_numpy(dataset.train_y))
validset=TensorDataset(torch.from_numpy(dataset.val_x), torch.from_numpy(dataset.val_y))
testset=TensorDataset(torch.from_numpy(dataset.test_x), torch.from_numpy(dataset.test_y))
trainloader = DataLoader(trainset, batch_size=128, shuffle=True)
valloader = DataLoader(validset, batch_size=128, shuffle=True)
testloader = DataLoader(testset, batch_size=128, shuffle=True)
#for d in trainloader:
   # print('X : ',(d[0].size()))
   # print('Y : ',(d[1].size()))

#미니배치 로드
dataiter= iter(trainloader)
#다음 미니배치 가져옴
x,y = next(dataiter)
#y = next(dataiter)

import torch
import torch.nn as nn


from torch.optim import Adam
import torch
import torch.nn as nn

class SelfAttention(nn.Module):
    def __init__(self, embed_size, heads):
        super(SelfAttention, self).__init__()
        self.embed_size = embed_size
        self.heads = heads
        self.head_dim = embed_size // heads

        assert (
            self.head_dim * heads == embed_size
        ), "Embedding size needs to be divisible by heads"

        self.values = nn.Linear(self.head_dim, self.head_dim, bias=False)
        self.keys = nn.Linear(self.head_dim, self.head_dim, bias=False)
        self.queries = nn.Linear(self.head_dim, self.head_dim, bias=False)
        self.fc_out = nn.Linear(heads * self.head_dim, embed_size)

    def forward(self, values, keys, query, mask):
        # Get number of training examples(number of batches)
        N = query.shape[0]

        value_len, key_len, query_len = values.shape[1], keys.shape[1], query.shape[1]

        # Split the embedding into self.heads different pieces
        values = values.reshape(N, value_len, self.heads, self.head_dim)
        keys = keys.reshape(N, key_len, self.heads, self.head_dim)
        query = query.reshape(N, query_len, self.heads, self.head_dim)

        values = self.values(values)  # (N, value_len, heads, head_dim)
        keys = self.keys(keys)  # (N, key_len, heads, head_dim)
        queries = self.queries(query)  # (N, query_len, heads, heads_dim)

        # Einsum does matrix mult. for query*keys for each training example
        # with every other training example, don't be confused by einsum
        # it's just how I like doing matrix multiplication & bmm

        energy = torch.einsum("nqhd,nkhd->nhqk", [queries, keys])
        # queries shape: (N, query_len, heads, heads_dim),
        # keys shape: (N, key_len, heads, heads_dim)
        # energy: (N, heads, query_len, key_len)

        # Mask padded indices so their weights become 0
        if mask is not None:
            energy = energy.masked_fill(mask == 0, float("-1e20"))

        # Normalize energy values similarly to seq2seq + attention
        # so that they sum to 1. Also divide by scaling factor for
        # better stability
        attention = torch.softmax(energy / (self.embed_size ** (1 / 2)), dim=3)
        # attention shape: (N, heads, query_len, key_len)

        out = torch.einsum("nhql,nlhd->nqhd", [attention, values]).reshape(
            N, query_len, self.heads * self.head_dim
        )
        # attention shape: (N, heads, query_len, key_len)
        # values shape: (N, value_len, heads, heads_dim)
        # out after matrix multiply: (N, query_len, heads, head_dim), then
        # we reshape and flatten the last two dimensions.

        out = self.fc_out(out)
        # Linear layer doesn't modify the shape, final shape will be
        # (N, query_len, embed_size)

        return out

class TransformerBlock(nn.Module):
    def __init__(self, embed_size, heads, dropout, forward_expansion):
        super(TransformerBlock, self).__init__()
        self.attention = SelfAttention(embed_size, heads)
        self.norm1 = nn.LayerNorm(embed_size)
        self.norm2 = nn.LayerNorm(embed_size)

        self.feed_forward = nn.Sequential(
            nn.Linear(embed_size, forward_expansion * embed_size),
            nn.ReLU(),
            nn.Linear(forward_expansion * embed_size, embed_size),
        )

        self.dropout = nn.Dropout(dropout)

    def forward(self, value, key, query, mask):
        attention = self.attention(value, key, query, mask)

        # Add skip connection, run through normalization and finally dropout
        x = self.dropout(self.norm1(attention + query))
        forward = self.feed_forward(x)
        out = self.dropout(self.norm2(forward + x))
        return out

class Encoder(nn.Module):
    def __init__(
        self,
        src_vocab_size,
        embed_size,
        num_layers,
        heads,
        device,
        forward_expansion,
        dropout,
        max_length,
    ):

        super(Encoder, self).__init__()
        self.embed_size = embed_size
        self.device = device
        self.word_embedding = nn.Embedding(src_vocab_size, embed_size)
        self.position_embedding = nn.Embedding(max_length, embed_size)

        self.layers = nn.ModuleList(
            [
                TransformerBlock(
                    embed_size,
                    heads,
                    dropout=dropout,
                    forward_expansion=forward_expansion,
                )
                for _ in range(num_layers)
            ]
        )

        self.dropout = nn.Dropout(dropout)

    def forward(self, x, mask):
        N, seq_length = x.shape
        positions = torch.arange(0, seq_length).expand(N, seq_length).to(self.device)
        out = self.dropout(
            (self.word_embedding(x) + self.position_embedding(positions))
        )

        # In the Encoder the query, key, value are all the same, it's in the
        # decoder this will change. This might look a bit odd in this case.
        for layer in self.layers:
            out = layer(out, out, out, mask)

        return out


class Transformer(nn.Module):
    def __init__(
        self,
        src_vocab_size,
        src_pad_idx,
        embed_size=400,
        num_layers=6,
        forward_expansion=4,
        heads=8,
        dropout=0,
        device="cpu",
        max_length=300,
    ):

        super(Transformer, self).__init__()

        self.encoder = Encoder(
            src_vocab_size,
            embed_size,
            num_layers,
            heads,
            device,
            forward_expansion,
            dropout,
            max_length,
        )

        self.src_pad_idx = src_pad_idx
        self.device = device

    def make_src_mask(self, src):
        src_mask = (src != self.src_pad_idx).unsqueeze(1).unsqueeze(2)
        # (N, 1, 1, src_len)
        return src_mask.to(self.device)



    def forward(self, src):
        src_mask = self.make_src_mask(src)
        enc_src = self.encoder(src, src_mask)
        #out = self.decoder(trg, enc_src, src_mask)
        return enc_src

# device = torch.device('cpu')
device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

#SentimentModel = EncoderClassifier(
#    len(word2int)+1,
#    embed_dim=EMBED_DIM,
#    num_layers=NUM_ENCODER_LAYERS,
#    num_heads=NUM_HEADS
#).to(device)


EMBED_DIM = 256
NUM_ENCODER_LAYERS = 3
NUM_HEADS = 4


"""
vocab_size = len(word2int)
output_size = 1
embedding_size = 256
hidden_size = 512
n_layers = 2
dropout=0.25
"""
class classification_model(nn.Module):
    def __init__(self, input_size, output_size):
        super(classification_model, self).__init__()
        self.transformer = Transformer(src_vocab_size=len(dataset.word2int),src_pad_idx=0,device=device)
        self.fc1 = nn.Linear(input_size, 256)
        self.fc2 = nn.Linear(256, 128)
        self.fc3 = nn.Linear(128, output_size)
        self.relu = nn.ReLU()

        self.sigmoid = nn.Sigmoid()
    def forward(self, x):
        x = self.transformer(x)
        x = x.mean(dim=1)
        x = self.fc1(x)
        x = nn.ReLU()(x)
        x = nn.Dropout(0.25)(x)
        x = self.fc2(x)
        x = nn.ReLU()(x)
        x = nn.Dropout(0.25)(x)
        x = self.fc3(x)
        x = self.sigmoid(x)

        return x

input_size = 400
output_size = 1

model = classification_model(input_size, output_size)
model.to(device)

#print(model)


lr = 0.0001
criterion = nn.BCELoss()  # we use BCELoss cz we have binary classification problem
optim = Adam(model.parameters(), lr=lr)
grad_clip = 5
epochs = 15
print_every = 1
history = {
    'train_loss': [],
    'train_acc': [],
    'val_loss': [],
    'val_acc': [],
    'epochs': epochs
}
es_limit = 5

epochloop = tqdm(range(epochs), position=0, desc='Training', leave=True)

# early stop trigger
es_trigger = 0
val_loss_min = torch.inf

for e in epochloop:

    #################
    # training mode #
    #################

    model.train()

    train_loss = 0
    train_acc = 0


    for id, (feature, target) in enumerate(trainloader):
        # add epoch meta info
        epochloop.set_postfix_str(f'Training batch {id}/{len(trainloader)}')

        # move to device

        feature, target = feature.to(device), target.to(device)
        # feature=tensor[128,256]

        # reset optimizer
        optim.zero_grad()

        # forward pass
        out = model(feature)

        # acc
        predicted = torch.tensor([1 if i == True else 0 for i in (out > 0.5)], device=device)
        equals = predicted == target
        acc = torch.mean(equals.type(torch.FloatTensor))
        train_acc += acc.item()

        # loss
        loss = criterion(out.squeeze(), target.float())
        train_loss += loss.item()
        loss.backward()

        # clip grad
        nn.utils.clip_grad_norm_(model.parameters(), grad_clip)

        # update optimizer
        optim.step()

        # free some memory
        del feature, target, predicted

    train_loss = train_loss / len(trainloader)
    print(f'train_loss : {train_loss}')
    history['train_loss'].append(train_loss)

    train_acc = train_acc / len(trainloader)
    print(f'train_acc : {train_acc}')
    history['train_acc'].append(train_acc)

    ####################
    # validation model #
    ####################

    model.eval()

    val_loss = 0
    val_acc = 0

    with torch.no_grad():
        for id, (feature, target) in enumerate(valloader):

            # add epoch meta info
            epochloop.set_postfix_str(f'Validation batch {id}/{len(valloader)}')

            # move to device
            feature, target = feature.to(device), target.to(device)

            # forward pass
            out = model(feature)


            # acc
            predicted = torch.tensor([1 if i.item()  == True else 0 for i in out > 0.5], device=device)
            equals = predicted == target
            acc = torch.mean(equals.type(torch.FloatTensor))
            val_acc += acc.item()

            # loss
            loss = criterion(out.squeeze(), target.float())
            val_loss += loss.item()

            # free some memory
            del feature, target, predicted

        val_loss = val_loss / len(valloader)
        print(f'val_loss : {val_loss}')
        history['val_loss'].append(val_loss)

        val_acc = val_acc / len(valloader)
        print(f'val_acc : {val_acc}')
        history['val_acc'].append(val_acc)

    flag=True
    # reset model mode
    #model.train()

    # add epoch meta info
    epochloop.set_postfix_str(f'Val Loss: {val_loss / len(valloader):.3f} | Val Acc: {val_acc / len(valloader):.3f}')

    # print epoch
    if (e+1) % print_every == 0:
        epochloop.write(f'Epoch {e+1}/{epochs} | Train Loss: {train_loss / len(trainloader):.3f} Train Acc: {train_acc / len(trainloader):.3f} | Val Loss: {val_loss / len(valloader):.3f} Val Acc: {val_acc / len(valloader):.3f}')
        epochloop.update()

    # save model if validation loss decrease
    if val_loss / len(valloader) <= val_loss_min:
        torch.save(model.state_dict(), './sentiment_lstm.pt')
        val_loss_min = val_loss / len(valloader)
        es_trigger = 0
    else:
        epochloop.write(f'[WARNING] Validation loss did not improved ({val_loss_min:.3f} --> {val_loss / len(valloader):.3f})')
        es_trigger += 1

    # force early stop
    if es_trigger >= es_limit:
        epochloop.write(f'Early stopped at Epoch-{e+1}')
        # update epochs history
        history['epochs'] = e+1
        flag=False

    if flag==False:
        break

# test loop
model.eval()

# metrics
test_loss = 0
test_acc = 0

all_target = []
all_predicted = []

testloop = tqdm(testloader, leave=True, desc='Inference')
with torch.no_grad():
    for feature, target in testloop:
        feature, target = feature.to(device), target.to(device)

        out = model(feature)

        predicted = torch.tensor([1 if i == True else 0 for i in out > 0.5], device=device)
        equals = predicted == target
        acc = torch.mean(equals.type(torch.FloatTensor))
        test_acc += acc.item()

        loss = criterion(out.squeeze(), target.float())
        test_loss += loss.item()

        all_target.extend(target.cpu().numpy())
        all_predicted.extend(predicted.cpu().numpy())

    print(f'Accuracy: {test_acc/len(testloader):.4f}, Loss: {test_loss/len(testloader):.4f}')
